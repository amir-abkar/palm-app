generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  relationMode      = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id        String      @id @default(uuid())
  firstName String
  lastName  String
  email     String      @unique
  password  String
  isAdmin   Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  avatar    String?
  gender    GENDER_TYPE @default(OTHER)
  baskets   Basket[]
  products  Product[]
  Account   Account[]
  Session   Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Basket {
  id            String     @id @default(uuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  userId        String
  user          User       @relation(fields: [userId], references: [id])
  purchasedList Purchase[]

  @@unique([userId, id])
  @@index([userId, id])
}

model Product {
  id          String     @id @unique @default(uuid())
  name        String
  price       Float
  image       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deleted     Boolean    @default(false)
  authorId    String
  description String
  author      User       @relation(fields: [authorId], references: [id])
  Purchase    Purchase[]

  @@index([authorId])
}

model Purchase {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
  basketId  String
  quantity  Int
  basket    Basket   @relation(fields: [basketId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([productId, basketId])
  @@index([basketId, productId])
}

enum GENDER_TYPE {
  MALE
  FEMALE
  OTHER
}
